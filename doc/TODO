@TODO 


1. command design 
    need argument/commands and use cases designed/documented 

    current commands:
        madmanmanage
        madmansetup
        madmanpopulate - forces population and adds locations and 
            files not already defined.  (thing of force rechecking,
            like in iTunes you can add all media from root of your 
            music and it adds in not defined items but doesnt add
            dupes.) 

2. performance and timing reporting during processing 
    -add in system info stuff during execution
    -add in timing functionality to time functions 
    for post processing reporting to say it took X seconds to
    process y items 
        - from madman.utility import log_timing 
        log_timing logs timing to logger 

    so really we need to expand on logging, perhaps send logger 
    infor (any levels, depends on configuration of logger) to a 
    database so post call we can report on the logging info 

3. settings and local settings - need to decouple local settings
    from generic global settings 
    thinking settings.py is global setings which at bottom
    imports local_settings.py where database/environment sepcific
    nonsense is overridden 

4. test suite - django has a great testing framework we need
to take advantage of im just lazy and right flawless code
/sarcasm 

5. yaml/xml or json or some way to define mediatype configuration 
    perhap slike flexget config in sense of a user modifiable file
    to define your media types and locations 
    ie.     

    Media - definition 
        Movie - def
            HD Movie - def
            SD Movie - def 
        TV
        Music
        Games

6. cross server synching/comparison 
    mark mentioned a nice to have would be to add in facility to synch over network
    another madman deployment with this local deployment 

    to do this a few things need to be addressed. first and foremost is space 
    i have 10tb of space, he has 30tb of space,... we cannot realistaclly 
    synch completly.  
        so you get into what to synch etc.  
        need to get over to other account and validate synching is possible
        potentially let use selectively synch items but not entire media types 
        or synch only subsets 

        ie. i want to synch HDTV with mark but not SDTV.  
        maybe we add a flag to media types to determine whether or not to 
        synch that particular type 

    -python fabric seems like it will come in handy here
    -tastypie django app - provides REST based API's for django apps 
        this may be another route to go for pre proecssing. 


    flow: 
        1. user locally says synch with remote madman deployment 
            (requires predefined madman deployments, along with ssh
            key exchanges so we can authenticate on the remote system) 
        2. user selects what to synch 
        3. tastypie comes into play to call remote madman to snag 
        what it has and do a local comparison to determine what needs synched 
        4. once conslidated and local user says this is what i want to synch
        we get into python fabric to handle the transport mechanisms to obtain 
        the remote data and store locally and then 
        5. data stored locally needs processed (maybe we put into a temp download
        dir or something and then run madmanmanage --path=/temp/dir/location/
        and process it as we normally would but in this case we dont symlink 

7. add tab completion when prompting for a directory/file system path 
    http://stackoverflow.com/questions/5637124/tab-completion-in-pythons-raw-input
    discusses a way to extend readline/raw_input to allow tab completion of paths 
    consider a similar implementation

8. Migrate build.sh to build.py to have a python environment available for installation 
    build.sh needs to piggy back off of settings file to obtain database params/
    credentials along with environment locations and what not

    tied to #3 above where we decouple settings and local_settings for
    enviornment sepcific stuf


9. MediaLocation.find method needs to tie into MediaType for what it actually finds in the directory.  
    right now its a hacked function that finds mp3s,zips, mkvs, avis, rars, isos, etc but doesnt concern itself with this MediaLocation.type.  
    additionally, return on find is a list with all none.  needs

10. log to a database for easier parsing of logging data and historical purposes 

11. management/commands/mmanage.py needs to take into consideration the --prompt switch for confirmation with user 
    currently we always prompt user but this option will override and assume best case and process without
    confirming with user -- a way to run as a cron job 

12. look at ConfigParser for writing to django settings file
    http://docs.python.org/library/configparser.html
